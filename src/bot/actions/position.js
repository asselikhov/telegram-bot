// src/bot/actions/position.js
const { Markup } = require('telegraf');
const { loadUsers, saveUser } = require('../../database/userModel');
const { BASE_POSITIONS_LIST, ADMIN_ID } = require('../../config/config');
const { clearPreviousMessages } = require('../utils');
const { showObjectSelection } = require('./objects');
const { showProfile } = require('../handlers/menu');

function getPositionsList(userId) {
    const positions = [...BASE_POSITIONS_LIST];
    if (userId === ADMIN_ID) positions.push('–ê–¥–º–∏–Ω');
    return positions;
}

async function showPositionSelection(ctx, userId) {
    await clearPreviousMessages(ctx, userId);

    const positions = getPositionsList(userId);
    const buttons = positions.map((pos, index) => [Markup.button.callback(pos, `select_initial_position_${index}_${userId}`)]);
    buttons.push([Markup.button.callback('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å', `custom_position_${userId}`)]);
    const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard(buttons));
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

module.exports = (bot) => {
    bot.action(/select_initial_position_(\d+)_(\d+)/, async (ctx) => {
        const positionIndex = parseInt(ctx.match[1], 10);
        const userId = ctx.match[2];
        const selectedPosition = getPositionsList(userId)[positionIndex];
        if (!selectedPosition) return;

        await clearPreviousMessages(ctx, userId);

        const users = await loadUsers();
        users[userId].position = selectedPosition;
        await saveUser(userId, users[userId]);
        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è userId ${userId}: ${selectedPosition}`);

        ctx.state.userStates[userId].step = 'enterFullName';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
        console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –§–ò–û –¥–ª—è userId ${userId} –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏`);
    });

    bot.action(/custom_position_(\d+)/, async (ctx) => {
        const userId = ctx.match[1];
        await clearPreviousMessages(ctx, userId);
        ctx.state.userStates[userId].step = 'customPositionInput';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action('edit_position', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        const positions = getPositionsList(userId);
        const buttons = positions.map((pos, index) => [Markup.button.callback(pos, `select_position_${index}`)]);
        buttons.push([Markup.button.callback('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å', 'custom_position_edit')]);
        buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]);
        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard(buttons));
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action(/select_position_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const positionIndex = parseInt(ctx.match[1], 10);
        const selectedPosition = getPositionsList(userId)[positionIndex];
        if (!selectedPosition) return;

        await clearPreviousMessages(ctx, userId);
        const users = await loadUsers();
        users[userId].position = selectedPosition;
        await saveUser(userId, users[userId]);
        ctx.state.userStates[userId].step = null;
        await ctx.reply(`–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${selectedPosition}"`);
        await showProfile(ctx);
    });

    bot.action('custom_position_edit', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        ctx.state.userStates[userId].step = 'customPositionEditInput';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.on('text', async (ctx) => {
        const userId = ctx.from.id.toString();
        const state = ctx.state.userStates[userId];
        console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç userId ${userId}: "${ctx.message.text}". –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${JSON.stringify(state)}`);

        if (!state) {
            console.log(`–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è userId ${userId}`);
            return;
        }

        await clearPreviousMessages(ctx, userId);
        const users = await loadUsers();

        try {
            if (state.step === 'customPositionInput') {
                const position = ctx.message.text.trim();
                users[userId].position = position;
                await saveUser(userId, users[userId]);
                console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è userId ${userId}: ${position}`);

                state.step = 'enterFullName';
                const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
                ctx.state.userStates[userId].messageIds.push(message.message_id);
                console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –§–ò–û –¥–ª—è userId ${userId} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏`);
            } else if (state.step === 'enterFullName') {
                const fullName = ctx.message.text.trim();
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –§–ò–û –¥–ª—è userId ${userId}: ${fullName}`);
                users[userId].fullName = fullName;
                await saveUser(userId, users[userId]);
                console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –§–ò–û –¥–ª—è userId ${userId}: ${fullName}`);

                const message = await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
                state.messageIds.push(message.message_id);
                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é userId ${userId}`);

                const adminText = `\n${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} - ${users[userId].position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (${users[userId].organization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})\n\n${users[userId].selectedObjects.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}`;
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è userId ${userId}: ${adminText}`);

                await ctx.telegram.sendMessage(ADMIN_ID, `üìù –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê${adminText}`, Markup.inlineKeyboard([
                    [Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})`, `approve_${userId}`)],
                    [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})`, `reject_${userId}`)]
                ]));
                console.log(`–ó–∞—è–≤–∫–∞ –æ—Ç userId ${userId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`);

                ctx.state.userStates[userId] = { step: null, messageIds: [] };
            } else if (state.step === 'customPositionEditInput') {
                users[userId].position = ctx.message.text.trim();
                await saveUser(userId, users[userId]);
                state.step = null;
                await ctx.reply(`–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${users[userId].position}".`);
                await showProfile(ctx);
            } else if (state.step === 'customOrganizationInput') {
                users[userId].organization = ctx.message.text.trim();
                users[userId].selectedObjects = [];
                await saveUser(userId, users[userId]);
                state.step = 'selectObjects';
                await showObjectSelection(ctx, userId, []);
                console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è userId ${userId} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
            } else if (state.step === 'customOrgEditInput') {
                users[userId].organization = ctx.message.text.trim();
                users[userId].selectedObjects = [];
                await saveUser(userId, users[userId]);
                state.step = null;
                await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${users[userId].organization}".`);
                await showProfile(ctx);
            } else {
                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –¥–ª—è userId ${userId}: ${state.step}`);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è userId ${userId}: ${error.message}`);
        }
    });
};

module.exports.showPositionSelection = showPositionSelection;