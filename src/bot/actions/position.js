const { Markup } = require('telegraf');
const { loadUsers, saveUser } = require('../../database/userModel');
const { BASE_POSITIONS_LIST, ADMIN_ID } = require('../../config/config');
const { clearPreviousMessages } = require('../utils');
const { loadInviteCode } = require('../../database/inviteCodeModel');

function getPositionsList(userId) {
    const positions = [...BASE_POSITIONS_LIST];
    if (userId === ADMIN_ID) positions.push('–ê–¥–º–∏–Ω');
    return positions;
}

async function showPositionSelection(ctx, userId) {
    await clearPreviousMessages(ctx, userId);

    const positions = getPositionsList(userId);
    const buttons = positions.map((pos, index) => [Markup.button.callback(pos, `select_initial_position_${index}_${userId}`)]);

    const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard(buttons));
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

module.exports = (bot) => {
    bot.action(/select_initial_position_(\d+)_(\d+)/, async (ctx) => {
        const positionIndex = parseInt(ctx.match[1], 10);
        const userId = ctx.match[2];
        const selectedPosition = getPositionsList(userId)[positionIndex];
        if (!selectedPosition) return;

        await clearPreviousMessages(ctx, userId);

        const users = await loadUsers();
        users[userId].position = selectedPosition;
        await saveUser(userId, users[userId]);
        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è userId ${userId}: ${selectedPosition}`);

        ctx.state.userStates[userId].step = 'enterFullName';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
        console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –§–ò–û –¥–ª—è userId ${userId} –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏`);
    });

    bot.action('edit_position', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        const positions = getPositionsList(userId);
        const buttons = positions.map((pos, index) => [Markup.button.callback(pos, `select_position_${index}`)]);
        buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]);

        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard(buttons));
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action(/select_position_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const positionIndex = parseInt(ctx.match[1], 10);
        const selectedPosition = getPositionsList(userId)[positionIndex];
        if (!selectedPosition) return;

        await clearPreviousMessages(ctx, userId);
        const users = await loadUsers();
        users[userId].position = selectedPosition;
        await saveUser(userId, users[userId]);
        ctx.state.userStates[userId].step = null;
        await ctx.reply(`–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${selectedPosition}"`);
        await require('../handlers/menu').showProfile(ctx);
    });

    bot.on('text', async (ctx) => {
        const userId = ctx.from.id.toString();
        const state = ctx.state.userStates[userId];
        if (!state) return;

        await clearPreviousMessages(ctx, userId);
        const users = await loadUsers();

        if (state.step === 'enterFullName') {
            const fullName = ctx.message.text.trim();
            users[userId].fullName = fullName;
            await saveUser(userId, users[userId]);
            console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –§–ò–û –¥–ª—è userId ${userId}: ${fullName}`);

            const message = await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
            state.messageIds.push(message.message_id);

            const inviteCodeData = await loadInviteCode(userId);
            const creatorId = inviteCodeData?.createdBy;
            const creator = creatorId ? users[creatorId] : null;
            const creatorFullName = creator ? creator.fullName : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            const adminText = `
${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} - ${users[userId].position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (${users[userId].organization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})
–û–±—ä–µ–∫—Ç—ã: ${users[userId].selectedObjects.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω: ${creatorFullName}
            `.trim();
            console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è userId ${userId}: ${adminText}`);

            await ctx.telegram.sendMessage(ADMIN_ID, `üìù –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n${adminText}`, Markup.inlineKeyboard([
                [Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})`, `approve_${userId}`)],
                [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})`, `reject_${userId}`)]
            ]));

            ctx.state.userStates[userId] = { step: null, messageIds: [] };
            console.log(`–ó–∞—è–≤–∫–∞ –æ—Ç userId ${userId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`);
        }
    });
};

module.exports.showPositionSelection = showPositionSelection;