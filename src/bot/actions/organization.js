const { Markup } = require('telegraf');
const { loadUsers, saveUser } = require('../../database/userModel');
const { ORGANIZATIONS_LIST, ADMIN_ID } = require('../../config/config');
const { clearPreviousMessages } = require('../utils');

async function showOrganizationSelection(ctx, userId) {
    await clearPreviousMessages(ctx, userId);

    const buttons = ORGANIZATIONS_LIST.map((org, index) => [Markup.button.callback(org, `select_organization_${index}`)]);
    buttons.push([Markup.button.callback('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', 'custom_organization')]);
    const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', Markup.inlineKeyboard(buttons));
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

module.exports = (bot) => {
    bot.action(/select_organization_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const orgIndex = parseInt(ctx.match[1], 10);
        const selectedOrganization = ORGANIZATIONS_LIST[orgIndex];
        if (!selectedOrganization) return;

        await clearPreviousMessages(ctx, userId);

        const users = await loadUsers();
        users[userId].organization = selectedOrganization;
        await saveUser(userId, users[userId]);

        ctx.state.userStates[userId].step = 'enterFullName';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
        console.log(`–®–∞–≥ enterFullName —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è userId ${userId}. State:`, ctx.state.userStates[userId]);
    });

    bot.action('custom_organization', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        ctx.state.userStates[userId].step = 'customOrganizationInput';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
        console.log(`–®–∞–≥ customOrganizationInput —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è userId ${userId}. State:`, ctx.state.userStates[userId]);
    });

    bot.action('edit_organization', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        const buttons = ORGANIZATIONS_LIST.map((org, index) => [Markup.button.callback(org, `select_org_edit_${index}`)]);
        buttons.push([Markup.button.callback('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', 'custom_org_edit')]);
        buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]);
        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', Markup.inlineKeyboard(buttons));
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action(/select_org_edit_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const orgIndex = parseInt(ctx.match[1], 10);
        const selectedOrganization = ORGANIZATIONS_LIST[orgIndex];
        if (!selectedOrganization) return;

        await clearPreviousMessages(ctx, userId);

        const users = await loadUsers();
        users[userId].organization = selectedOrganization;
        await saveUser(userId, users[userId]);
        ctx.state.userStates[userId].step = null;
        const message = await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${selectedOrganization}".`, Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]]));
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action('custom_org_edit', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        ctx.state.userStates[userId].step = 'customOrgEditInput';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.on('text', async (ctx) => {
        const userId = ctx.from.id.toString();
        const state = ctx.state.userStates[userId];
        console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç userId ${userId}: "${ctx.message.text}". State:`, state);

        if (!state) {
            console.log(`–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è userId ${userId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É`);
            return;
        }

        if (state.step === 'customOrganizationInput') {
            await clearPreviousMessages(ctx, userId);
            const users = await loadUsers();
            users[userId].organization = ctx.message.text.trim();
            await saveUser(userId, users[userId]);
            state.step = 'enterFullName';
            const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
            state.messageIds.push(message.message_id);
            console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ enterFullName –¥–ª—è userId ${userId}. State:`, state);
            return;
        }

        if (state.step === 'enterFullName') {
            try {
                console.log(`–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–∞ enterFullName –¥–ª—è userId ${userId}`);
                await clearPreviousMessages(ctx, userId);
                console.log(`–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –¥–ª—è userId ${userId}`);

                const users = await loadUsers();
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è userId ${userId}:`, users[userId]);

                const fullName = ctx.message.text.trim();
                users[userId].fullName = fullName;
                console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –§–ò–û –¥–ª—è userId ${userId}: ${fullName}`);

                await saveUser(userId, users[userId]);
                console.log(`–§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–ª—è userId ${userId}`);

                const userMessage = await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
                state.messageIds.push(userMessage.message_id);
                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è userId ${userId}, messageId: ${userMessage.message_id}`);

                const adminText = `\n${users[userId].fullName || '–§–ò–û –Ω–µ —É–∫–∞–∑–∞–Ω–æ'} - ${users[userId].position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} (${users[userId].organization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})\n\n${users[userId].selectedObjects.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}`;
                console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è userId ${userId}: ${adminText}`);
                const adminMessage = await ctx.telegram.sendMessage(
                    ADMIN_ID,
                    `üìù –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê${adminText}`,
                    Markup.inlineKeyboard([
                        [Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${users[userId].fullName || '–ë–µ–∑ –∏–º–µ–Ω–∏'})`, `approve_${userId}`)],
                        [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${users[userId].fullName || '–ë–µ–∑ –∏–º–µ–Ω–∏'})`, `reject_${userId}`)]
                    ])
                );
                console.log(`–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è userId ${userId}. Message ID: ${adminMessage.message_id}`);

                ctx.state.userStates[userId] = { step: null, selectedObjects: [], report: {}, messageIds: [] };
                console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è userId ${userId}`);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞ enterFullName –¥–ª—è userId ${userId}:`, error.stack);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            return;
        }

        if (state.step === 'customOrgEditInput') {
            await clearPreviousMessages(ctx, userId);
            const users = await loadUsers();
            users[userId].organization = ctx.message.text.trim();
            await saveUser(userId, users[userId]);
            state.step = null;
            const message = await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${users[userId].organization}".`, Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]]));
            state.messageIds.push(message.message_id);
            return;
        }

        console.log(`–¢–µ–∫—Å—Ç –æ—Ç userId ${userId} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —à–∞–≥: ${state.step}`);
    });
};

module.exports.showOrganizationSelection = showOrganizationSelection;