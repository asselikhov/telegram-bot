const { Markup } = require('telegraf');
const { loadUsers, saveUser } = require('../../database/userModel');
const { ORGANIZATIONS_LIST, ADMIN_ID } = require('../../config/config');
const { clearPreviousMessages } = require('../utils');

async function showOrganizationSelection(ctx, userId) {
    await clearPreviousMessages(ctx, userId);

    const buttons = ORGANIZATIONS_LIST.map((org, index) => [Markup.button.callback(org, `select_organization_${index}`)]);
    buttons.push([Markup.button.callback('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', 'custom_organization')]);
    const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', Markup.inlineKeyboard(buttons));
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

module.exports = (bot) => {
    bot.action(/select_organization_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const orgIndex = parseInt(ctx.match[1], 10);
        const selectedOrganization = ORGANIZATIONS_LIST[orgIndex];
        if (!selectedOrganization) return;

        await clearPreviousMessages(ctx, userId);

        const users = await loadUsers();
        users[userId].organization = selectedOrganization;
        await saveUser(userId, users[userId]);

        ctx.state.userStates[userId].step = 'enterFullName';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
        console.log(`–®–∞–≥ enterFullName —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è userId ${userId}. State:`, ctx.state.userStates[userId]);
    });

    bot.action('custom_organization', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        ctx.state.userStates[userId].step = 'customOrganizationInput';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
        console.log(`–®–∞–≥ customOrganizationInput —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è userId ${userId}. State:`, ctx.state.userStates[userId]);
    });

    bot.action('edit_organization', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        const buttons = ORGANIZATIONS_LIST.map((org, index) => [Markup.button.callback(org, `select_org_edit_${index}`)]);
        buttons.push([Markup.button.callback('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', 'custom_org_edit')]);
        buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]);
        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', Markup.inlineKeyboard(buttons));
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action(/select_org_edit_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const orgIndex = parseInt(ctx.match[1], 10);
        const selectedOrganization = ORGANIZATIONS_LIST[orgIndex];
        if (!selectedOrganization) return;

        await clearPreviousMessages(ctx, userId);

        const users = await loadUsers();
        users[userId].organization = selectedOrganization;
        await saveUser(userId, users[userId]);
        ctx.state.userStates[userId].step = null;
        const message = await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${selectedOrganization}".`, Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]]));
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action('custom_org_edit', async (ctx) => {
        const userId = ctx.from.id.toString();
        await clearPreviousMessages(ctx, userId);
        ctx.state.userStates[userId].step = 'customOrgEditInput';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:');
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.on('text', async (ctx) => {
        const userId = ctx.from.id.toString();
        const state = ctx.state.userStates[userId];
        if (!state) {
            console.log(`–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è userId ${userId}`);
            return;
        }

        console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç userId ${userId}: "${ctx.message.text}". State:`, state);

        if (state.step === 'customOrganizationInput') {
            await clearPreviousMessages(ctx, userId);
            const users = await loadUsers();
            users[userId].organization = ctx.message.text.trim();
            await saveUser(userId, users[userId]);
            state.step = 'enterFullName';
            const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
            state.messageIds.push(message.message_id);
            console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ enterFullName –¥–ª—è userId ${userId}. State:`, state);
        } else if (state.step === 'enterFullName') {
            await clearPreviousMessages(ctx, userId);
            const users = await loadUsers();
            users[userId].fullName = ctx.message.text.trim();
            await saveUser(userId, users[userId]);

            console.log(`–§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è userId ${userId}: ${users[userId].fullName}`);

            const message = await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
            state.messageIds.push(message.message_id);

            const adminText = `\n${users[userId].fullName} - ${users[userId].position} (${users[userId].organization})\n\n${users[userId].selectedObjects.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}`;
            await ctx.telegram.sendMessage(ADMIN_ID, `üìù –°–ü–ò–°–û–ö –ó–ê–Ø–í–û–ö${adminText}`, Markup.inlineKeyboard([
                [Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${users[userId].fullName})`, `approve_${userId}`)],
                [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${users[userId].fullName})`, `reject_${userId}`)]
            ]));

            console.log(`–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è userId ${userId}`);

            ctx.state.userStates[userId] = { step: null, selectedObjects: [], report: {}, messageIds: [] };
        } else if (state.step === 'customOrgEditInput') {
            await clearPreviousMessages(ctx, userId);
            const users = await loadUsers();
            users[userId].organization = ctx.message.text.trim();
            await saveUser(userId, users[userId]);
            state.step = null;
            const message = await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${users[userId].organization}".`, Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]]));
            state.messageIds.push(message.message_id);
        }
    });
};

module.exports.showOrganizationSelection = showOrganizationSelection;