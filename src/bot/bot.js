const { Telegraf, Markup } = require('telegraf');
const { BOT_TOKEN, ADMIN_ID } = require('../config/config');
const { loadUsers, saveUser } = require('../database/userModel');
const startHandler = require('./handlers/start');
const menuHandler = require('./handlers/menu');
const reportHandler = require('./handlers/report');
const adminHandler = require('./handlers/admin');
const commandsHandler = require('./handlers/commands');
const positionActions = require('./actions/position');
const organizationActions = require('./actions/organization');
const objectsActions = require('./actions/objects');
const statusActions = require('./actions/status');

const bot = new Telegraf(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ctx.reply
bot.use((ctx, next) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    console.log('–û—à–∏–±–∫–∞: userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', ctx.from);
    return next();
  }
  if (!userStates[userId]) {
    userStates[userId] = {
      step: null,
      selectedObjects: [],
      report: {},
      messageIds: []
    };
  }
  ctx.state.userStates = userStates;

  const originalReply = ctx.reply.bind(ctx);
  ctx.reply = async (text, extra) => {
    const message = await originalReply(text, extra);
    if (userStates[userId]) {
      userStates[userId].messageIds.push(message.message_id);
      console.log(`[ctx.reply] –°–æ–æ–±—â–µ–Ω–∏–µ ${message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ messageIds –¥–ª—è userId ${userId}. –ú–∞—Å—Å–∏–≤:`, userStates[userId].messageIds);
    }
    return message;
  };

  return next();
});

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥
bot.on('text', async (ctx) => {
  const userId = ctx.from.id.toString();
  console.log(`[–ì–ª–æ–±–∞–ª—å–Ω—ã–π] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç userId ${userId}: "${ctx.message.text}"`);
  const state = ctx.state.userStates[userId];
  console.log(`[–ì–ª–æ–±–∞–ª—å–Ω—ã–π] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è userId ${userId}:`, state);

  if (ctx.message.text === '/start') {
    const chatType = ctx.chat.type;
    if (chatType !== 'private') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.');
      return;
    }

    const users = await loadUsers();
    if (!users[userId]) {
      users[userId] = {
        fullName: '',
        position: '',
        organization: '',
        selectedObjects: [],
        status: '–í —Ä–∞–±–æ—Ç–µ',
        isApproved: false,
        nextReportId: 1,
        reports: {}
      };
      await saveUser(userId, users[userId]);
      state.step = 'selectObjects';
      state.messageIds = [];
      const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã:', Markup.inlineKeyboard([[Markup.button.callback('–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç', 'select_object_0')]]));
      state.messageIds = [message.message_id];
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤`);
    } else if (users[userId].isApproved) {
      await require('./menu').showMainMenu(ctx);
    } else {
      const user = users[userId];
      state.messageIds = [];
      if (!user.selectedObjects.length) {
        state.step = 'selectObjects';
        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã:', Markup.inlineKeyboard([[Markup.button.callback('–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç', 'select_object_0')]]));
        state.messageIds = [message.message_id];
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤`);
      } else if (!user.position) {
        state.step = 'selectPosition';
        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard([[Markup.button.callback('–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å', 'select_position_0')]]));
        state.messageIds = [message.message_id];
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏`);
      } else if (!user.organization) {
        state.step = 'selectOrganization';
        const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', Markup.inlineKeyboard([[Markup.button.callback('–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', 'select_organization_0')]]));
        state.messageIds = [message.message_id];
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
      } else if (!user.fullName) {
        state.step = 'enterFullName';
        const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
        state.messageIds = [message.message_id];
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤–≤–æ–¥–∞ –§–ò–û`);
      } else {
        const message = await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
        state.messageIds = [message.message_id];
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∑–∞—è–≤–∫—É –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`);
      }
    }
  } else if (state && state.step === 'enterFullName') {
    const fullName = ctx.message.text.trim();
    const users = await loadUsers();
    users[userId].fullName = fullName;
    await saveUser(userId, users[userId]);
    await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
    await ctx.telegram.sendMessage(ADMIN_ID, `üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${fullName}`);
    console.log(`[–ì–ª–æ–±–∞–ª—å–Ω—ã–π] –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è userId ${userId}`);
    state.step = null;
    state.messageIds = [];
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
bot.action(/select_object_(\d+)/, async (ctx) => {
  const userId = ctx.from.id.toString();
  const users = await loadUsers();
  users[userId].selectedObjects = ['–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç'];
  await saveUser(userId, users[userId]);
  ctx.state.userStates[userId].step = 'selectPosition';
  const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', Markup.inlineKeyboard([[Markup.button.callback('–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å', 'select_position_0')]]));
  ctx.state.userStates[userId].messageIds = [message.message_id];
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–±—Ä–∞–ª –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ—à—ë–ª –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏`);
});

bot.action(/select_position_(\d+)/, async (ctx) => {
  const userId = ctx.from.id.toString();
  const users = await loadUsers();
  users[userId].position = '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å';
  await saveUser(userId, users[userId]);
  ctx.state.userStates[userId].step = 'selectOrganization';
  const message = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', Markup.inlineKeyboard([[Markup.button.callback('–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', 'select_organization_0')]]));
  ctx.state.userStates[userId].messageIds = [message.message_id];
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–±—Ä–∞–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ—à—ë–ª –∫ –≤—ã–±–æ—Ä—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
});

bot.action(/select_organization_(\d+)/, async (ctx) => {
  const userId = ctx.from.id.toString();
  const users = await loadUsers();
  users[userId].organization = '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
  await saveUser(userId, users[userId]);
  ctx.state.userStates[userId].step = 'enterFullName';
  const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
  ctx.state.userStates[userId].messageIds = [message.message_id];
  console.log(`–®–∞–≥ enterFullName —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è userId ${userId}. State:`, ctx.state.userStates[userId]);
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
startHandler(bot);
menuHandler(bot);
reportHandler(bot);
adminHandler(bot);
commandsHandler(bot);
positionActions(bot);
organizationActions(bot);
objectsActions(bot);
statusActions(bot);

module.exports = bot;