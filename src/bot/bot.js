const { Telegraf } = require('telegraf');
const { BOT_TOKEN } = require('../config/config');
const startHandler = require('./handlers/start');
const menuHandler = require('./handlers/menu');
const reportHandler = require('./handlers/report');
const adminHandler = require('./handlers/admin');
const commandsHandler = require('./handlers/commands');
const positionActions = require('./actions/position');
const organizationActions = require('./actions/organization');
const objectsActions = require('./actions/objects');
const statusActions = require('./actions/status');
const { loadUsers, saveUser } = require('../database/userModel');
const { loadUserReports, saveReport } = require('../database/reportModel');
const { clearPreviousMessages } = require('./utils');
const { ADMIN_ID, OBJECT_GROUPS, GENERAL_GROUP_CHAT_ID } = require('../config/config');
const { Markup } = require('telegraf');

const bot = new Telegraf(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ctx.reply
bot.use((ctx, next) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    console.log('–û—à–∏–±–∫–∞: userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', ctx.from);
    return next();
  }
  if (!userStates[userId]) {
    userStates[userId] = {
      step: null,
      selectedObjects: [],
      report: {},
      messageIds: []
    };
  }
  ctx.state.userStates = userStates;

  const originalReply = ctx.reply.bind(ctx);
  ctx.reply = async (text, extra) => {
    try {
      const message = await originalReply(text, extra);
      if (userStates[userId]) {
        userStates[userId].messageIds.push(message.message_id);
        console.log(`[ctx.reply] –°–æ–æ–±—â–µ–Ω–∏–µ ${message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ messageIds –¥–ª—è userId ${userId}. –ú–∞—Å—Å–∏–≤:`, userStates[userId].messageIds);
      } else {
        console.log(`–û—à–∏–±–∫–∞: userStates –¥–ª—è ${userId} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏ ctx.reply`);
      }
      return message;
    } catch (error) {
      console.error(`[ctx.reply] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è userId ${userId}:`, error.message);
      throw error;
    }
  };

  return next();
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç ctx.telegram.sendMessage
const originalSendMessage = bot.telegram.sendMessage.bind(bot.telegram);
bot.telegram.sendMessage = async (chatId, text, extra) => {
  try {
    const message = await originalSendMessage(chatId, text, extra);
    const userId = chatId.toString();
    if (userStates[userId]) {
      userStates[userId].messageIds.push(message.message_id);
      console.log(`[sendMessage] –°–æ–æ–±—â–µ–Ω–∏–µ ${message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ messageIds –¥–ª—è userId ${userId}. –ú–∞—Å—Å–∏–≤:`, userStates[userId].messageIds);
    } else {
      console.log(`–û—à–∏–±–∫–∞: userStates –¥–ª—è ${userId} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏ sendMessage`);
    }
    return message;
  } catch (error) {
    console.error(`[sendMessage] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chatId ${chatId}:`, error.message);
    throw error;
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
bot.on('text', async (ctx) => {
  const userId = ctx.from.id.toString();
  const text = ctx.message.text;
  const state = ctx.state.userStates[userId];
  console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç userId ${userId}: "${text}". –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, state);

  if (text.startsWith('/')) {
    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  }

  if (!state || !state.step) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞
  }

  await clearPreviousMessages(ctx, userId);

  if (state.step === 'custom  customPositionInput') {
    const users = await loadUsers();
    users[userId].position = text.trim();
    await saveUser(userId, users[userId]);
    state.step = 'selectOrganization';
    await require('./actions/organization').showOrganizationSelection(ctx, userId);
  } else if (state.step === 'customOrganizationInput') {
    const users = await loadUsers();
    users[userId].organization = text.trim();
    await saveUser(userId, users[userId]);
    state.step = 'enterFullName';
    const message = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
    state.messageIds.push(message.message_id);
  } else if (state.step === 'enterFullName') {
    const users = await loadUsers();
    users[userId].fullName = text.trim();
    await saveUser(userId, users[userId]);

    const message = await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
    state.messageIds.push(message.message_id);

    const adminText = `\n${users[userId].fullName} - ${users[userId].position} (${users[userId].organization})\n\n${users[userId].selectedObjects.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}`;
    await ctx.telegram.sendMessage(ADMIN_ID, `üìù –°–ü–ò–°–û–ö –ó–ê–Ø–í–û–ö${adminText}`, Markup.inlineKeyboard([
      [Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${users[userId].fullName})`, `approve_${userId}`)],
      [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${users[userId].fullName})`, `reject_${userId}`)]
    ]));

    ctx.state.userStates[userId] = { step: null, selectedObjects: [], report: {}, messageIds: [] };
  } else if (state.step === 'editFullName') {
    const users = await loadUsers();
    users[userId].fullName = text.trim();
    await saveUser(userId, users[userId]);
    await ctx.reply(`–§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${users[userId].fullName}".`);
    state.step = null;
    await require('./handlers/menu').showProfile(ctx);
  } else if (state.step === 'customPositionEditInput') {
    const users = await loadUsers();
    users[userId].position = text.trim();
    await saveUser(userId, users[userId]);
    state.step = null;
    await ctx.reply(`–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${users[userId].position}".`);
    await require('./handlers/menu').showProfile(ctx);
  } else if (state.step === 'customOrgEditInput') {
    const users = await loadUsers();
    users[userId].organization = text.trim();
    await saveUser(userId, users[userId]);
    state.step = null;
    const message = await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${users[userId].organization}".`, Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile')]]));
    state.messageIds.push(message.message_id);
  } else if (state.step === 'workDone') {
    state.report.workDone = text.trim();
    state.step = 'materials';
    await ctx.reply('üí° –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö:');
  } else if (state.step === 'materials') {
    state.report.materials = text.trim();
    const users = await loadUsers();
    const date = new Date().toISOString().split('T')[0];
    const timestamp = new Date().toISOString();
    const reportId = `${date}_${users[userId].nextReportId++}`;
    const report = {
      reportId,
      userId,
      objectName: state.report.objectName,
      date,
      timestamp,
      workDone: state.report.workDone,
      materials: state.report.materials,
      groupMessageId: null,
      generalMessageId: null,
      fullName: users[userId].fullName
    };

    const reportText = `
üìÖ –û–¢–ß–ï–¢ –ó–ê ${date}  
üè¢ ${state.report.objectName}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ 
üë∑ ${users[userId].fullName} 

–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –†–ê–ë–û–¢–´:  
${state.report.workDone}  

–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´:  
${state.report.materials}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    `.trim();

    const groupChatId = OBJECT_GROUPS[state.report.objectName] || GENERAL_GROUP_CHAT_ID;
    const groupMessage = await ctx.telegram.sendMessage(groupChatId, reportText);
    const generalMessage = await ctx.telegram.sendMessage(GENERAL_GROUP_CHAT_ID, reportText);

    report.groupMessageId = groupMessage.message_id;
    report.generalMessageId = generalMessage.message_id;

    await saveReport(userId, report);
    await saveUser(userId, users[userId]);

    await ctx.reply(`‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:\n\n${reportText}`);
    state.step = null;
    state.report = {};
  } else if (state.step === 'editWorkDone') {
    state.report.workDone = text.trim();
    state.step = 'editMaterials';
    await ctx.reply('üí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö:');
  } else if (state.step === 'editMaterials') {
    state.report.materials = text.trim();
    const users = await loadUsers();
    const originalReportId = state.report.originalReportId;
    let originalReport = null;

    if (originalReportId) {
      const userReports = await loadUserReports(userId);
      originalReport = userReports[originalReportId];
    }

    const newTimestamp = new Date().toISOString();
    const newReportId = `${state.report.date}_${users[userId].nextReportId++}`;
    const newReport = {
      reportId: newReportId,
      userId,
      objectName: state.report.objectName,
      date: state.report.date,
      timestamp: newTimestamp,
      workDone: state.report.workDone,
      materials: state.report.materials,
      groupMessageId: null,
      generalMessageId: null,
      fullName: users[userId].fullName
    };

    const reportText = `
üìÖ –û–¢–ß–ï–¢ –ó–ê ${newReport.date} (–û–ë–ù–û–í–õ–Å–ù)  
üè¢ ${newReport.objectName}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ 
üë∑ ${users[userId].fullName} 

–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –†–ê–ë–û–¢–´:  
${newReport.workDone}  

–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´:  
${newReport.materials}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    `.trim();

    const groupChatId = OBJECT_GROUPS[newReport.objectName] || GENERAL_GROUP_CHAT_ID;

    if (originalReport) {
      if (originalReport.groupMessageId) {
        await ctx.telegram.deleteMessage(groupChatId, originalReport.groupMessageId)
            .catch(e => console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${originalReport.groupMessageId}: ${e.message}`));
      }
      if (originalReport.generalMessageId) {
        await ctx.telegram.deleteMessage(GENERAL_GROUP_CHAT_ID, originalReport.generalMessageId)
            .catch(e => console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${originalReport.generalMessageId}: ${e.message}`));
      }

      const client = await require('../database/db').pool.connect();
      try {
        await client.query('DELETE FROM reports WHERE reportId = $1', [originalReportId]);
      } finally {
        client.release();
      }
    }

    const groupMessage = await ctx.telegram.sendMessage(groupChatId, reportText);
    const generalMessage = await ctx.telegram.sendMessage(GENERAL_GROUP_CHAT_ID, reportText);

    newReport.groupMessageId = groupMessage.message_id;
    newReport.generalMessageId = generalMessage.message_id;

    await saveReport(userId, newReport);
    await saveUser(userId, users[userId]);

    await ctx.reply(`‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n${reportText}`, Markup.inlineKeyboard([
      [Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]
    ]));
    state.step = null;
    state.report = {};
  }
});

startHandler(bot);
menuHandler(bot);
reportHandler(bot);
adminHandler(bot);
commandsHandler(bot);
positionActions(bot);
organizationActions(bot);
objectsActions(bot);
statusActions(bot);

module.exports = bot;