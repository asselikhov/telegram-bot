const { Telegraf } = require('telegraf');
const { BOT_TOKEN, ADMIN_ID } = require('../config/config');
const startHandler = require('./handlers/start');
const menuHandler = require('./handlers/menu');
const reportHandler = require('./handlers/report');
const adminHandler = require('./handlers/admin');
const commandsHandler = require('./handlers/commands');
const positionActions = require('./actions/position');
const organizationActions = require('./actions/organization');
const objectsActions = require('./actions/objects');
const statusActions = require('./actions/status');

const bot = new Telegraf(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ctx.reply
bot.use((ctx, next) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    console.log('–û—à–∏–±–∫–∞: userId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', ctx.from);
    return next();
  }
  if (!userStates[userId]) {
    userStates[userId] = {
      step: null,
      selectedObjects: [],
      report: {},
      messageIds: []
    };
  }
  ctx.state.userStates = userStates;

  const originalReply = ctx.reply.bind(ctx);
  ctx.reply = async (text, extra) => {
    const message = await originalReply(text, extra);
    if (userStates[userId]) {
      userStates[userId].messageIds.push(message.message_id);
      console.log(`[ctx.reply] –°–æ–æ–±—â–µ–Ω–∏–µ ${message.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ messageIds –¥–ª—è userId ${userId}. –ú–∞—Å—Å–∏–≤:`, userStates[userId].messageIds);
    }
    return message;
  };

  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è enterFullName
bot.on('text', async (ctx) => {
  const userId = ctx.from.id.toString();
  console.log(`[–ì–ª–æ–±–∞–ª—å–Ω—ã–π] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç userId ${userId}: "${ctx.message.text}"`);
  const state = ctx.state.userStates[userId];
  console.log(`[–ì–ª–æ–±–∞–ª—å–Ω—ã–π] –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è userId ${userId}:`, state);

  if (state && state.step === 'enterFullName') {
    const fullName = ctx.message.text.trim();
    await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
    await ctx.telegram.sendMessage(ADMIN_ID, `üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${fullName}`);
    console.log(`[–ì–ª–æ–±–∞–ª—å–Ω—ã–π] –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è userId ${userId}`);
    state.step = null;
    state.messageIds = [];
  } else {
    await ctx.reply(`–≠—Ö–æ: ${ctx.message.text}`);
    console.log(`[–ì–ª–æ–±–∞–ª—å–Ω—ã–π] –≠—Ö–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è userId ${userId}`);
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
startHandler(bot);
menuHandler(bot);
reportHandler(bot);
adminHandler(bot);
commandsHandler(bot);
positionActions(bot);
organizationActions(bot);
objectsActions(bot);
statusActions(bot);

module.exports = bot;