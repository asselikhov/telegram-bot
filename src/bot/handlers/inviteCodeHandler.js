const { Markup } = require('telegraf');
const { generateInviteCode } = require('../../database/inviteCodeModel');
const { loadUsers } = require('../../database/userModel');
const { clearPreviousMessages } = require('../utils');
const { ORGANIZATION_OBJECTS, ADMIN_ID } = require('../../config/config');

module.exports = (bot) => {
    bot.action('generate_invite_code', async (ctx) => {
        const userId = ctx.from.id.toString();
        const users = await loadUsers();

        if (!users[userId]?.isApproved) {
            await ctx.reply('–¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥—ã.');
            return;
        }

        const organization = users[userId].organization;
        const code = await generateInviteCode(userId, organization);

        await clearPreviousMessages(ctx, userId);
        const messageText = `
üîë **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥**  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
**${organization}**  
–ö–æ–¥: \`${code}\`  
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        `.trim();

        await ctx.reply(messageText, { parse_mode: 'Markdown', reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]
            ]).reply_markup });
    });

    bot.action('admin_invite_code_menu', async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        await clearPreviousMessages(ctx, userId);
        const organizations = Object.keys(ORGANIZATION_OBJECTS);
        const buttons = organizations.map((org, index) => [
            Markup.button.callback(org, `generate_admin_code_${index}`)
        ]).concat([[Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]]);
        await ctx.reply('üîë **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞**\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', Markup.inlineKeyboard(buttons));
    });

    bot.action(/generate_admin_code_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const orgIndex = parseInt(ctx.match[1], 10);
        const users = await loadUsers();
        const organization = Object.keys(ORGANIZATION_OBJECTS)[orgIndex];
        if (!organization) return;

        const code = await generateInviteCode(userId, organization);
        await clearPreviousMessages(ctx, userId);

        const messageText = `
üîë **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥**  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
**${organization}**  
–ö–æ–¥: \`${code}\`  
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        `.trim();

        await ctx.reply(messageText, { parse_mode: 'Markdown', reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]
            ]).reply_markup });
    });
};