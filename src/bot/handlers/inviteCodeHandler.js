const { Markup } = require('telegraf');
const { pool } = require('../../database/db');
const { generateInviteCode } = require('../../database/inviteCodeModel');
const { loadUsers } = require('../../database/userModel');
const { clearPreviousMessages } = require('../utils');
const { ORGANIZATION_OBJECTS } = require('../../config/config');
const { ADMIN_ID } = require('../../config/config');

module.exports = (bot) => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.action('generate_invite_code', async (ctx) => {
        console.log('[generate_invite_code] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è generate_invite_code –¥–ª—è userId:', ctx.from.id);
        const userId = ctx.from.id.toString();

        try {
            const users = await loadUsers();
            console.log('[generate_invite_code] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(users));

            if (!users[userId]) {
                console.log('[generate_invite_code] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
                await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');
                return;
            }

            if (!users[userId].isApproved) {
                console.log('[generate_invite_code] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', userId);
                await ctx.reply('–¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥—ã.');
                return;
            }

            const organization = users[userId].organization;
            console.log('[generate_invite_code] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', organization);
            const code = await generateInviteCode(userId, organization);

            await clearPreviousMessages(ctx, userId);
            console.log('[generate_invite_code] –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –¥–ª—è userId:', userId);

            const messageText = `
üîë **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥**  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: **${organization}**  
–ö–æ–¥: \`${code}\`  
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
            `.trim();

            const message = await ctx.reply(
                messageText,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', `copy_code_${code}`)],
                        [Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]
                    ]).reply_markup
                }
            );
            console.log('[generate_invite_code] –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, message_id:', message.message_id);
            ctx.state.userStates[userId].messageIds.push(message.message_id);
        } catch (error) {
            console.error('[generate_invite_code] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    bot.action('admin_invite_code_menu', async (ctx) => {
        console.log('[admin_invite_code_menu] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è admin_invite_code_menu –¥–ª—è userId:', ctx.from.id);
        const userId = ctx.from.id.toString();

        if (userId !== ADMIN_ID) {
            console.log('[admin_invite_code_menu] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', userId);
            await ctx.reply('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            return;
        }

        await clearPreviousMessages(ctx, userId);
        console.log('[admin_invite_code_menu] –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –¥–ª—è userId:', userId);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        const organizations = Object.keys(ORGANIZATION_OBJECTS);
        console.log('[admin_invite_code_menu] –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', organizations);

        if (organizations.length === 0) {
            await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤.');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        const buttons = organizations.map((org, index) => [
            Markup.button.callback(org, `generate_admin_code_${index}`)
        ]);
        buttons.push([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]);

        const message = await ctx.reply(
            'üîë **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞**\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:',
            Markup.inlineKeyboard(buttons)
        );
        console.log('[admin_invite_code_menu] –ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, message_id:', message.message_id);
        ctx.state.userStates[userId].messageIds.push(message.message_id);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        ctx.state.userStates[userId].adminOrganizations = organizations;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    bot.action(/generate_admin_code_(\d+)/, async (ctx) => {
        console.log('[generate_admin_code] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è generate_admin_code –¥–ª—è userId:', ctx.from.id);
        const userId = ctx.from.id.toString();
        const orgIndex = parseInt(ctx.match[1], 10);

        if (userId !== ADMIN_ID) {
            console.log('[generate_admin_code] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:', userId);
            await ctx.reply('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            return;
        }

        try {
            const users = await loadUsers();
            console.log('[generate_admin_code] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(users));

            if (!users[userId]) {
                console.log('[generate_admin_code] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
                await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');
                return;
            }

            const organizations = ctx.state.userStates[userId].adminOrganizations || [];
            if (!organizations[orgIndex]) {
                console.log('[generate_admin_code] –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É:', orgIndex);
                await ctx.reply('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            const organization = organizations[orgIndex];
            console.log('[generate_admin_code] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', organization);
            const code = await generateInviteCode(userId, organization);

            await clearPreviousMessages(ctx, userId);
            console.log('[generate_admin_code] –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –¥–ª—è userId:', userId);

            const messageText = `
üîë **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥**  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: **${organization}**  
–ö–æ–¥: \`${code}\`  
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
            `.trim();

            const message = await ctx.reply(
                messageText,
                {
                    parse_mode: 'Markdown',
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', `copy_code_${code}`)],
                        [Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]
                    ]).reply_markup
                }
            );
            console.log('[generate_admin_code] –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, message_id:', message.message_id);
            ctx.state.userStates[userId].messageIds.push(message.message_id);
        } catch (error) {
            console.error('[generate_admin_code] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
    bot.action(/copy_code_(.+)/, async (ctx) => {
        const code = ctx.match[1];
        console.log('[copy_code] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞:', code, '–¥–ª—è userId:', ctx.from.id);

        await ctx.reply(`–ö–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: \`${code}\`\n–í—ã–¥–µ–ª–∏—Ç–µ –∫–æ–¥ –≤—ã—à–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.`, { parse_mode: 'Markdown' });
    });
};