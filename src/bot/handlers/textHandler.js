const { Markup } = require('telegraf');
const { loadUsers, saveUser } = require('../../database/userModel');
const { clearPreviousMessages } = require('../utils');
const { loadInviteCode, markInviteCodeAsUsed, validateInviteCode } = require('../../database/inviteCodeModel');
const { showObjectSelection } = require('../actions/objects');
const { showProfile } = require('./menu');
const { saveReport, loadUserReports } = require('../../database/reportModel');
const { ORGANIZATIONS_LIST, GENERAL_GROUP_CHAT_IDS, OBJECT_GROUPS, ADMIN_ID } = require('../../config/config');

module.exports = (bot) => {
    bot.on('text', async (ctx) => {
        const userId = ctx.from.id.toString();
        const state = ctx.state.userStates[userId];
        console.log(`[textHandler.js] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è userId ${userId}: "${ctx.message.text}", state:`, state);

        if (!state || !state.step) {
            console.log(`[textHandler.js] –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —à–∞–≥–∞ –¥–ª—è userId ${userId}`);
            return;
        }

        await clearPreviousMessages(ctx, userId);
        const users = await loadUsers();

        switch (state.step) {
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤–≤–æ–¥ –∫–æ–¥–∞
            case 'enterInviteCode':
                const code = ctx.message.text.trim();
                const inviteData = await validateInviteCode(code);
                if (!inviteData) {
                    const message = await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
                    state.messageIds.push(message.message_id);
                    return;
                }
                const { organization, createdBy } = inviteData;
                console.log(`[textHandler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –∫–æ–¥ ${code}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π ${createdBy}, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${organization}`);
                users[userId].organization = organization;
                await saveUser(userId, users[userId]);
                await markInviteCodeAsUsed(code, userId);
                state.step = 'selectObjects';
                await showObjectSelection(ctx, userId, []);
                break;

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤–≤–æ–¥ –§–ò–û
            case 'enterFullName':
                const fullName = ctx.message.text.trim();
                users[userId].fullName = fullName;
                await saveUser(userId, users[userId]);
                console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –§–ò–û –¥–ª—è userId ${userId}: ${fullName}`);

                const message = await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ');
                state.messageIds.push(message.message_id);

                const inviteCodeData = await loadInviteCode(userId);
                const creatorId = inviteCodeData?.createdBy;
                const creator = creatorId ? users[creatorId] : null;
                const creatorFullName = creator ? creator.fullName : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

                const adminText = `
${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} - ${users[userId].position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (${users[userId].organization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})
–û–±—ä–µ–∫—Ç—ã: ${users[userId].selectedObjects.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω: ${creatorFullName}
                `.trim();
                await ctx.telegram.sendMessage(ADMIN_ID, `üìù –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n${adminText}`, Markup.inlineKeyboard([
                    [Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})`, `approve_${userId}`)],
                    [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${users[userId].fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})`, `reject_${userId}`)]
                ]));
                ctx.state.userStates[userId] = { step: null, messageIds: [] };
                break;

            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û
            case 'editFullNameInput':
                const newFullName = ctx.message.text.trim();
                users[userId].fullName = newFullName;
                await saveUser(userId, users[userId]);
                console.log(`–§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è userId ${userId}: ${newFullName}`);
                state.step = null;
                await ctx.reply(`–í–∞—à–µ –§–ò–û –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "${newFullName}"`);
                await showProfile(ctx);
                break;

            // –í–≤–æ–¥ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            case 'customOrganizationInput':
                users[userId].organization = ctx.message.text.trim();
                users[userId].selectedObjects = [];
                await saveUser(userId, users[userId]);
                state.step = 'selectObjects';
                await showObjectSelection(ctx, userId, []);
                console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è userId ${userId} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
                break;

            // –í–≤–æ–¥ –∫–æ–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            case 'enterInviteCode':
                const orgCode = ctx.message.text.trim();
                const newOrg = await validateInviteCode(orgCode);
                if (!newOrg) {
                    const message = await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
                    state.messageIds.push(message.message_id);
                    return;
                }
                users[userId].organization = newOrg.organization;
                users[userId].selectedObjects = [];
                await saveUser(userId, users[userId]);
                await markInviteCodeAsUsed(orgCode);
                state.step = 'selectObjects';
                await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${newOrg.organization}". –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã:`);
                await showObjectSelection(ctx, userId, []);
                break;

            // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            case 'workDone':
                state.report.workDone = ctx.message.text.trim();
                state.step = 'materials';
                await ctx.reply('üí° –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö:');
                break;

            case 'materials':
                state.report.materials = ctx.message.text.trim();
                state.step = 'photos';
                await ctx.reply('üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –æ—Ç—á–µ—Ç—É (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):');
                break;

            case 'photos':
                if (ctx.message.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
                    const date = new Date().toISOString().split('T')[0];
                    const timestamp = new Date().toISOString();
                    const reportId = `${date}_${users[userId].nextReportId++}`;
                    const report = {
                        reportId,
                        userId,
                        objectName: state.report.objectName,
                        date,
                        timestamp,
                        workDone: state.report.workDone,
                        materials: state.report.materials,
                        groupMessageIds: {},
                        fullName: users[userId].fullName,
                        photos: state.report.photos || []
                    };
                    const reportText = `
üìÖ –û–¢–ß–ï–¢ –ó–ê ${date}  
üè¢ ${report.objectName}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ 
üë∑ ${users[userId].fullName} 

–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –†–ê–ë–û–¢–´:  
${report.workDone}  

–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´:  
${report.materials}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                    `.trim();

                    const groupChatId = OBJECT_GROUPS[report.objectName] || GENERAL_GROUP_CHAT_IDS['default'].chatId;
                    const userOrg = users[userId].organization;
                    const targetOrgs = [
                        userOrg,
                        ...ORGANIZATIONS_LIST.filter(org => GENERAL_GROUP_CHAT_IDS[org]?.reportSources?.includes(userOrg))
                    ];
                    const allChatIds = [groupChatId, ...targetOrgs.map(org => GENERAL_GROUP_CHAT_IDS[org]?.chatId || GENERAL_GROUP_CHAT_IDS['default'].chatId)];

                    if (report.photos.length > 0) {
                        const mediaGroup = report.photos.map((photoId, index) => ({
                            type: 'photo',
                            media: photoId,
                            caption: index === 0 ? reportText.slice(0, 1024) : undefined // –¢–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
                        }));
                        for (const chatId of allChatIds) {
                            try {
                                const messages = await ctx.telegram.sendMediaGroup(chatId, mediaGroup);
                                report.groupMessageIds[chatId] = messages[0].message_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            } catch (e) {
                                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç ${chatId}: ${e.message}`);
                            }
                        }
                    } else {
                        for (const chatId of allChatIds) {
                            try {
                                const message = await ctx.telegram.sendMessage(chatId, reportText);
                                report.groupMessageIds[chatId] = message.message_id;
                            } catch (e) {
                                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç ${chatId}: ${e.message}`);
                            }
                        }
                    }

                    await saveReport(userId, report);
                    await saveUser(userId, users[userId]);
                    await ctx.reply(`‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:\n\n${reportText}${report.photos.length > 0 ? '\n(–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)' : ''}`);
                    state.step = null;
                    state.report = {};
                }
                break;

            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            case 'editWorkDone':
                state.report.workDone = ctx.message.text.trim();
                state.step = 'editMaterials';
                await ctx.reply('üí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö:');
                break;

            case 'editMaterials':
                state.report.materials = ctx.message.text.trim();
                state.step = 'editPhotos';
                state.report.photos = state.report.photos || [];
                await ctx.reply('üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –Ω–∞–ø–∏—à–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ" –∏–ª–∏ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):');
                break;

            case 'editPhotos':
                if (ctx.message.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
                    const newTimestamp = new Date().toISOString();
                    const newReportId = `${state.report.date}_${users[userId].nextReportId++}`;
                    const newReport = {
                        reportId: newReportId,
                        userId,
                        objectName: state.report.objectName,
                        date: state.report.date,
                        timestamp: newTimestamp,
                        workDone: state.report.workDone,
                        materials: state.report.materials,
                        groupMessageIds: {},
                        fullName: users[userId].fullName,
                        photos: state.report.photos
                    };
                    const newReportText = `
üìÖ –û–¢–ß–ï–¢ –ó–ê ${newReport.date} (–û–ë–ù–û–í–õ–Å–ù)  
üè¢ ${newReport.objectName}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ 
üë∑ ${users[userId].fullName} 

–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –†–ê–ë–û–¢–´:  
${newReport.workDone}  

–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´:  
${newReport.materials}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                    `.trim();

                    const oldReportId = state.report.originalReportId;
                    if (oldReportId) {
                        const userReports = await loadUserReports(userId);
                        const oldReport = userReports[oldReportId];
                        if (oldReport?.groupMessageIds) {
                            for (const [chatId, msgId] of Object.entries(oldReport.groupMessageIds)) {
                                await ctx.telegram.deleteMessage(chatId, msgId).catch(e =>
                                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId} –≤ —á–∞—Ç–µ ${chatId}: ${e.message}`)
                                );
                            }
                            const client = await require('../../database/db').pool.connect();
                            try {
                                await client.query('DELETE FROM reports WHERE reportId = $1', [oldReportId]);
                            } finally {
                                client.release();
                            }
                        }
                    }

                    const newGroupChatId = OBJECT_GROUPS[newReport.objectName] || GENERAL_GROUP_CHAT_IDS['default'].chatId;
                    const userOrg = users[userId].organization;
                    const targetOrgs = [
                        userOrg,
                        ...ORGANIZATIONS_LIST.filter(org => GENERAL_GROUP_CHAT_IDS[org]?.reportSources?.includes(userOrg))
                    ];
                    const allChatIds = [newGroupChatId, ...targetOrgs.map(org => GENERAL_GROUP_CHAT_IDS[org]?.chatId || GENERAL_GROUP_CHAT_IDS['default'].chatId)];

                    if (newReport.photos.length > 0) {
                        const mediaGroup = newReport.photos.map((photoId, index) => ({
                            type: 'photo',
                            media: photoId,
                            caption: index === 0 ? newReportText.slice(0, 1024) : undefined // –¢–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
                        }));
                        for (const chatId of allChatIds) {
                            try {
                                const messages = await ctx.telegram.sendMediaGroup(chatId, mediaGroup);
                                newReport.groupMessageIds[chatId] = messages[0].message_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            } catch (e) {
                                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —á–∞—Ç ${chatId}: ${e.message}`);
                            }
                        }
                    } else {
                        for (const chatId of allChatIds) {
                            try {
                                const message = await ctx.telegram.sendMessage(chatId, newReportText);
                                newReport.groupMessageIds[chatId] = message.message_id;
                            } catch (e) {
                                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —á–∞—Ç ${chatId}: ${e.message}`);
                            }
                        }
                    }

                    await saveReport(userId, newReport);
                    await saveUser(userId, users[userId]);
                    await ctx.reply(`‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n${newReportText}${newReport.photos.length > 0 ? '\n(–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)' : ''}`, Markup.inlineKeyboard([
                        [Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'profile')]
                    ]));
                    state.step = null;
                    state.report = {};
                } else if (ctx.message.text.toLowerCase() === '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ') {
                    state.report.photos = [];
                    await ctx.reply('–í—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
                }
                break;

            default:
                console.log(`[textHandler.js] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –¥–ª—è userId ${userId}: ${state.step}`);
                break;
        }
    });

    bot.on('photo', async (ctx) => {
        const userId = ctx.from.id.toString();
        const state = ctx.state.userStates[userId];
        if (!state || (state.step !== 'photos' && state.step !== 'editPhotos')) return;

        const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        state.report.photos.push(photoId);
        await ctx.reply('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
    });
};