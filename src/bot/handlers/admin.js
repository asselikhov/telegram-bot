const { Markup } = require('telegraf');
const { loadUsers, saveUser, deleteUser } = require('../../database/userModel');
const { clearPreviousMessages } = require('../utils');
const { ADMIN_ID } = require('../../config/config');

module.exports = (bot) => {
    bot.action('admin_panel', async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        await clearPreviousMessages(ctx, userId);
        await ctx.reply('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard([
            [Markup.button.callback('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', 'view_applications')],
            [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'main_menu')]
        ]));
    });

    bot.action('view_applications', async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const users = await loadUsers();
        const pendingUsers = Object.entries(users).filter(([_, user]) => !user.isApproved);

        await clearPreviousMessages(ctx, userId);
        if (pendingUsers.length === 0) {
            await ctx.reply('–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.', Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'admin_panel')]]));
            return;
        }

        const buttons = pendingUsers.map(([uid, user]) => [
            Markup.button.callback(`${user.fullName} (${user.organization})`, `review_${uid}`)
        ]).concat([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'admin_panel')]]);
        await ctx.reply('–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:', Markup.inlineKeyboard(buttons));
    });

    bot.action(/review_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const reviewUserId = ctx.match[1];
        const users = await loadUsers();
        const user = users[reviewUserId];
        if (!user || user.isApproved) return;

        await clearPreviousMessages(ctx, userId);
        const objectsList = user.selectedObjects.length > 0 ? user.selectedObjects.map(obj => `¬∑ ${obj}`).join('\n') : '–ù–µ –≤—ã–±—Ä–∞–Ω—ã';
        const userData = `
üìù **–ó–∞—è–≤–∫–∞**  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
üë§ **–§–ò–û:** ${user.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}  
üè¢ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** ${user.organization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}  
üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** ${user.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}  
üèó **–û–±—ä–µ–∫—Ç—ã:**\n${objectsList}
        `.trim();

        await ctx.reply(userData, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${reviewUserId}`)],
                [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${reviewUserId}`)],
                [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'view_applications')]
            ]).reply_markup
        });
    });

    bot.action(/approve_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const approveUserId = ctx.match[1];
        const users = await loadUsers();
        if (users[approveUserId] && !users[approveUserId].isApproved) {
            users[approveUserId].isApproved = 1;
            await saveUser(approveUserId, users[approveUserId]);
            await ctx.telegram.sendMessage(approveUserId, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.');
        }
        await ctx.reply('–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.');
    });

    bot.action(/reject_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const rejectUserId = ctx.match[1];
        const users = await loadUsers();
        if (users[rejectUserId] && !users[rejectUserId].isApproved) {
            await deleteUser(rejectUserId);
            await ctx.telegram.sendMessage(rejectUserId, '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
        }
        await ctx.reply('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
    });
};