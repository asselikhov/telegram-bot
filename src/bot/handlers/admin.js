const { Markup } = require('telegraf');
const { loadUsers, saveUser } = require('../../database/userModel');
const { pool } = require('../../database/db');
const { ADMIN_ID } = require('../../config/config');
const { clearPreviousMessages } = require('../utils');

async function showAdminPanel(ctx) {
    const userId = ctx.from.id.toString();
    if (userId !== ADMIN_ID) return;

    await clearPreviousMessages(ctx, userId); // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    const buttons = [
        [Markup.button.callback('üìù –ó–∞—è–≤–∫–∏', 'show_requests')],
        [Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ];

    const message = await ctx.reply('üëë –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨', Markup.inlineKeyboard(buttons));
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

async function showRequests(ctx) {
    const userId = ctx.from.id.toString();
    if (userId !== ADMIN_ID) return;

    await clearPreviousMessages(ctx, userId); // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    const users = await loadUsers();
    const pendingUsers = Object.entries(users)
        .filter(([_, user]) => !user.isApproved)
        .map(([userId, user]) => ({
            userId,
            fullName: user.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            position: user.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            organization: user.organization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            objects: user.selectedObjects.length > 0 ? user.selectedObjects.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
        }));

    const requestsText = pendingUsers.length === 0
        ? '–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.'
        : pendingUsers.map(u => `\n${u.fullName} - ${u.position} (${u.organization})\n\n${u.objects}`).join('\n\n');

    const buttons = pendingUsers.map(u => [
        Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${u.fullName})`, `approve_${u.userId}`),
        Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${u.fullName})`, `reject_${u.userId}`)
    ]);
    buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_panel')]);

    const message = await ctx.reply(`üìù –°–ü–ò–°–û–ö –ó–ê–Ø–í–û–ö\n\n${requestsText}`, Markup.inlineKeyboard(buttons));
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

module.exports = (bot) => {
    bot.action('admin_panel', showAdminPanel);

    bot.action('show_requests', showRequests);

    bot.action(/approve_(.+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const targetUserId = ctx.match[1];
        if (userId !== ADMIN_ID) return;

        const users = await loadUsers();
        if (!users[targetUserId]) return;

        users[targetUserId].isApproved = true;
        await saveUser(targetUserId, users[targetUserId]);
        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${users[targetUserId].fullName} –æ–¥–æ–±—Ä–µ–Ω.`);
        await bot.telegram.sendMessage(targetUserId, '‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.');
        await showRequests(ctx); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    });

    bot.action(/reject_(.+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        const targetUserId = ctx.match[1];
        if (userId !== ADMIN_ID) return;

        const client = await pool.connect();
        try {
            await client.query('DELETE FROM users WHERE userId = $1', [targetUserId]);
            await ctx.reply('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
            await bot.telegram.sendMessage(targetUserId, '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
            await showRequests(ctx); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        } finally {
            client.release();
        }
    });
};