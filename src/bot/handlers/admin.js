const { Markup } = require('telegraf');
const { loadUsers, saveUser } = require('../../database/userModel');
const { clearPreviousMessages } = require('../utils');
const { ADMIN_ID } = require('../../config/config');

module.exports = (bot) => {
    bot.action('admin_panel', async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) {
            return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
        }

        await clearPreviousMessages(ctx, userId);

        const users = await loadUsers();
        const pendingUsers = Object.entries(users).filter(([_, user]) => !user.isApproved);

        if (pendingUsers.length === 0) {
            return ctx.reply('–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.');
        }

        for (const [userId, user] of pendingUsers) {
            const adminText = `\n${user.fullName} - ${user.position} (${user.organization})\n\n${user.selectedObjects.join(', ') || '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}`;
            await ctx.reply(`üìù –°–ü–ò–°–û–ö –ó–ê–Ø–í–û–ö${adminText}`, Markup.inlineKeyboard([
                [Markup.button.callback(`‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (${user.fullName})`, `approve_${userId}`)],
                [Markup.button.callback(`‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (${user.fullName})`, `reject_${userId}`)]
            ]));
        }
    });

    bot.action(/approve_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const targetUserId = ctx.match[1];
        const users = await loadUsers();
        if (!users[targetUserId]) return;

        users[targetUserId].isApproved = true;
        await saveUser(targetUserId, users[targetUserId]);

        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${users[targetUserId].fullName} –æ–¥–æ–±—Ä–µ–Ω.`);
        await ctx.telegram.sendMessage(targetUserId, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
        await ctx.deleteMessage();
    });

    bot.action(/reject_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const targetUserId = ctx.match[1];
        const users = await loadUsers();
        if (!users[targetUserId]) return;

        delete users[targetUserId];
        const client = await require('../../database/db').pool.connect();
        try {
            await client.query('DELETE FROM users WHERE userId = $1', [targetUserId]);
        } finally {
            client.release();
        }

        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –æ—Ç–∫–ª–æ–Ω—ë–Ω.`);
        await ctx.telegram.sendMessage(targetUserId, '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
        await ctx.deleteMessage();
    });
};