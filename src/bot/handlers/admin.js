const { Markup } = require('telegraf');
const { loadUsers, saveUser, deleteUser } = require('../../database/userModel');
const { clearPreviousMessages } = require('../utils');
const { showMainMenu } = require('./menu');
const { ADMIN_ID } = require('../../config/config');
const { loadInviteCode } = require('../../database/inviteCodeModel');

async function showAdminPanel(ctx) {
    const userId = ctx.from.id.toString();
    if (userId !== ADMIN_ID) return;

    await clearPreviousMessages(ctx, userId);
    const message = await ctx.reply(
        'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', 'view_applications')],
            [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'main_menu')]
        ])
    );
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

async function showApplications(ctx) {
    const userId = ctx.from.id.toString();
    if (userId !== ADMIN_ID) return;

    await clearPreviousMessages(ctx, userId);
    const users = await loadUsers();
    const pendingUsers = Object.entries(users).filter(([_, user]) => !user.isApproved);

    if (pendingUsers.length === 0) {
        const message = await ctx.reply('–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–µ—Ç.', Markup.inlineKeyboard([
            [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'admin_panel')]
        ]));
        ctx.state.userStates[userId].messageIds.push(message.message_id);
        return;
    }

    const buttons = pendingUsers.map(([uid, user]) => [
        Markup.button.callback(
            `${user.fullName} (${user.organization})`,
            `review_${uid}`
        )
    ]);
    buttons.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'admin_panel')]);

    const message = await ctx.reply('–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:', Markup.inlineKeyboard(buttons));
    ctx.state.userStates[userId].messageIds.push(message.message_id);
}

module.exports = (bot) => {
    bot.action('admin_panel', showAdminPanel);
    bot.action('view_applications', showApplications);

    bot.action(/review_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const reviewUserId = ctx.match[1];
        const users = await loadUsers();
        const user = users[reviewUserId];

        if (!user || user.isApproved) return;

        const inviteCodeData = await loadInviteCode(reviewUserId);
        console.log('[review] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ inviteCodeData –¥–ª—è userId', reviewUserId, ':', inviteCodeData);

        const creatorId = inviteCodeData?.createdby; // –ò—Å–ø–æ–ª—å–∑—É–µ–º createdby –≤–º–µ—Å—Ç–æ createdBy
        console.log('[review] ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–¥–∞:', creatorId, '–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reviewUserId);

        let creatorFullName;
        if (!inviteCodeData || !creatorId) {
            creatorFullName = '–ö–æ–¥ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
        } else {
            const creator = users[creatorId];
            creatorFullName = creator ? creator.fullName : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        }
        console.log('[review] –°–æ–∑–¥–∞—Ç–µ–ª—å:', creatorFullName);

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const usedAt = inviteCodeData?.usedat // –ò—Å–ø–æ–ª—å–∑—É–µ–º usedat –≤–º–µ—Å—Ç–æ usedAt
            ? new Date(inviteCodeData.usedat).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })
            : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ selectedObjects
        const selectedObjects = Array.isArray(user.selectedObjects)
            ? user.selectedObjects
            : user.selectedObjects
                ? [user.selectedObjects]
                : [];
        const objectsList = selectedObjects.length > 0
            ? selectedObjects.map(obj => `¬∑ ${obj}`).join('\n')
            : '–ù–µ –≤—ã–±—Ä–∞–Ω—ã';

        await clearPreviousMessages(ctx, userId);

        const userData = `
üìù **–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é**  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
üë§ **–§–ò–û:** ${user.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}  
üè¢ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** ${user.organization || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}  
üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** ${user.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}  
üèó **–û–±—ä–µ–∫—Ç—ã:**  
${objectsList}  
üîë **–ö–æ–¥ —Å–æ–∑–¥–∞–Ω:** ${creatorFullName}  
‚è∞ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:** ${usedAt}
    `.trim();

        const message = await ctx.reply(userData, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${reviewUserId}`)],
                [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${reviewUserId}`)],
                [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'view_applications')]
            ]).reply_markup
        });
        ctx.state.userStates[userId].messageIds.push(message.message_id);
    });

    bot.action(/approve_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const approveUserId = ctx.match[1];
        const users = await loadUsers();
        const user = users[approveUserId];

        if (user && !user.isApproved) {
            users[approveUserId].isApproved = 1;
            await saveUser(approveUserId, users[approveUserId]);
            await ctx.telegram.sendMessage(approveUserId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.');
            await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.fullName} –æ–¥–æ–±—Ä–µ–Ω.`);
        }
        await showApplications(ctx);
    });

    bot.action(/reject_(\d+)/, async (ctx) => {
        const userId = ctx.from.id.toString();
        if (userId !== ADMIN_ID) return;

        const rejectUserId = ctx.match[1];
        const users = await loadUsers();
        const user = users[rejectUserId];

        if (user && !user.isApproved) {
            await deleteUser(rejectUserId);
            await ctx.telegram.sendMessage(rejectUserId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
            await ctx.reply(`–ó–∞—è–≤–∫–∞ ${user.fullName} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
        }
        await showApplications(ctx);
    });
};